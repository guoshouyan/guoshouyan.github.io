[{"title":"Docker容器简单使用","date":"2017-04-17T23:03:25.000Z","path":"2017/04/17/Docker容器简单使用/","text":"docker三个重要概念：镜像，容器，仓库。 安装mac由于没有Linux环境，需要先装docker-machine。docker-machine能帮你创建不同的docker engine(hypervisor)。 docker 命令是在docker engine 上创建不同的容器。 创建docker engine12345678创建docker engine：docker-machine create --driver virtualbox --virtualbox-cpu-count 2 --virtualbox-memory 2048 newEngine得到不同engineIP地址：docker-machine ip newEngine 切换到不同的docker engine上：eval $(docker-machine env newEngine) 使用容器容器相当于由镜像创建的动态虚拟机。1.创建一个容器：1docker run -d -p 80:80 --name webserver nginx 需要注意的是如果不是在后台运行，容器执行完程序后会自动停止webserver就是容器的名字nginx就是使用镜像的名字其它选项有：12345-t 选项让Docker分配一个伪终端(pseudo-tty)并绑定到容器的标准输入上-i 让容器的标准输入保持打开前两个选项能直接跟容器bash沟通-d 后台运行-p 绑定端口 2.改变容器状态：12docker stop webserverdocker rm webserver 3.检查容器状态12345docker ps 正在运行的容器，-a 包括已经停止的containerdocker top 容器里面正在运行的程序docker logs id 查看输出的logdocker attach id 连接容器，ctrl-p, ctrl-q退出docker exec -i -t id bash 另一种进入容器方法 4.连接容器1docker run -d -P --name web --link db:db training/webapp –link 参数的格式为 –link name:alias，其中 name 是要链接的容器的名称，是这个连接的别名 5.添加数据卷123docker volume ls 查看数据卷docker volume rm 删除数据卷docker run -it -d -v /local/path:/opt/webapp ubuntu:14.04 /bin/bash 数据卷不会随着容器的删除而删除，除非加上-rm。-v /local/path:/opt/webapp 是连接一个数据卷到容器里，：号前面是本地的文件夹，后面是在容器里显示的路径","tags":[{"name":"学技术","slug":"学技术","permalink":"http://yoursite.com/tags/学技术/"}]},{"title":"云计算：分布式监控与追踪","date":"2017-04-05T18:15:25.000Z","path":"2017/04/05/云计算：分布式监控与追踪/","text":"本系列将简谈云计算都各方面技术，本次介绍分布式监控与追踪 分布式监控与追踪监控与追踪分为三种，1， 第一种是performance counter， 记录CPU，disk都各种数据。比如aws的cloud watch，Ganglia。在Ganglia都结构图如下：比较特别都是同一个cluster里的数据会向其它节点广播，要查询数据都时候只需要问其中一个节点要就好了。这样减少了节点加入或离开集群都复杂度，同时保证的数据备份，但是增加了数据都传输量。 2，另一种是logging，记录各种发生都时间。 3，最后一种是基于workflow都end-to-end tracing。它虽然用logging的方式，但是纪录的是每个事件发生都所有步骤，经过了各种子系统。其中代表有cmu的workflow-centric 和Google的Dapper。cmu的系统结构图如下：其通过在不同系统设置trace point，跟踪每一个请求到达的trace point来跟踪每一个请求，然后放到trace storage里面。 Google的Dapper：Dapper里子系统都是通过RPC调用，因此Dapper设计出一个树状结构的trace。每一个RPC带有父系统的trace id和自己的span id。这样每个系统都能各自trace自己的事件。","tags":[{"name":"学技术","slug":"学技术","permalink":"http://yoursite.com/tags/学技术/"}]},{"title":"玩玩Reddit","date":"2017-04-04T21:13:02.000Z","path":"2017/04/04/玩玩Reddit/","text":"今天来尝试玩玩国外的“百度贴吧”–Reddit","tags":[{"name":"玩产品","slug":"玩产品","permalink":"http://yoursite.com/tags/玩产品/"}]},{"title":"Effective Java","date":"2017-04-04T19:03:35.000Z","path":"2017/04/04/Effective Java/","text":"第一篇博客就谢谢java吧，这篇博客根据effective java和cmu的15-214: Principles of Software System Construction部分内容组合而成。","tags":[{"name":"学技术","slug":"学技术","permalink":"http://yoursite.com/tags/学技术/"}]},{"title":"Hello World","date":"2017-03-26T22:00:09.000Z","path":"2017/03/26/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]